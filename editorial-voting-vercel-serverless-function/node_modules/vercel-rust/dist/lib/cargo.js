"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findBinaryName = exports.findCargoBuildConfiguration = exports.findCargoWorkspace = exports.getCargoMetadata = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const toml_1 = __importDefault(require("@iarna/toml"));
const execa_1 = __importDefault(require("execa"));
function getCargoMetadata(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout: cargoMetaData } = yield (0, execa_1.default)('cargo', ['metadata', '--format-version', '1'], options);
        return JSON.parse(cargoMetaData);
    });
}
exports.getCargoMetadata = getCargoMetadata;
function findCargoWorkspace(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout: projectDescriptionStr } = yield (0, execa_1.default)('cargo', ['locate-project'], config);
        const projectDescription = JSON.parse(projectDescriptionStr);
        return {
            toml: yield toml_1.default.parse.stream(node_fs_1.default.createReadStream(projectDescription.root)),
            root: projectDescription.root,
        };
    });
}
exports.findCargoWorkspace = findCargoWorkspace;
function findCargoBuildConfiguration(workspace) {
    return __awaiter(this, void 0, void 0, function* () {
        const configPath = node_path_1.default.join(node_path_1.default.dirname(workspace.root), '.cargo/config.toml');
        if (!node_fs_1.default.existsSync(configPath)) {
            return null;
        }
        const config = yield toml_1.default.parse.stream(node_fs_1.default.createReadStream(configPath));
        return config;
    });
}
exports.findCargoBuildConfiguration = findCargoBuildConfiguration;
function findBinaryName(workspace, entryPath) {
    const { bin } = workspace.toml;
    if (bin) {
        const relativePath = node_path_1.default.relative(node_path_1.default.dirname(workspace.root), entryPath);
        const entry = bin.find((binEntry) => binEntry.path === relativePath);
        if (entry === null || entry === void 0 ? void 0 : entry.name) {
            return entry.name;
        }
    }
    return node_path_1.default.basename(entryPath, '.rs').replace('[', '_').replace(']', '_');
}
exports.findBinaryName = findBinaryName;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRoutes = exports.parseRoute = void 0;
const lodash_1 = require("lodash");
const CatchPriority = {
    Static: 0,
    Dynamic: 1,
    CatchAll: 2,
    OptionalCatchAll: 2,
};
function parseRoute(filepath) {
    const route = filepath.endsWith('.rs') ? filepath.slice(0, -3) : filepath;
    const segments = route.split('/');
    const result = segments.reduce((acc, segment) => {
        // Catch all route
        if (segment.startsWith('[...') && segment.endsWith(']')) {
            acc.catchType = CatchPriority.CatchAll;
            acc.src.push('(\\S+)');
            return acc;
        }
        // Optional catch all route
        if (segment.startsWith('[[...') && segment.endsWith(']]')) {
            acc.catchType = CatchPriority.OptionalCatchAll;
            acc.src.push('(/\\S+)?');
            return acc;
        }
        // Dynamic route
        if (segment.startsWith('[') && segment.endsWith(']')) {
            const parameterName = segment.replace('[', '').replace(']', '');
            acc.catchType = CatchPriority.Dynamic;
            acc.src.push(`(?<${parameterName}>[^/]+)`);
            acc.searchParams.set(parameterName, `$${parameterName}`);
            return acc;
        }
        // Static routes do not need adding to `routes`.
        acc.catchType = CatchPriority.Static;
        acc.src.push(segment);
        return acc;
    }, {
        catchType: null,
        src: [],
        searchParams: new URLSearchParams(),
    });
    const searchParams = decodeURIComponent(result.searchParams.toString());
    const queryString = searchParams !== '' ? `?${searchParams}` : '';
    return {
        src: `/${result.src.join('/')}`,
        dest: `/${route}${queryString}`,
        path: route,
        depth: segments.length,
        catchType: result.catchType,
    };
}
exports.parseRoute = parseRoute;
function generateRoutes(files) {
    const routes = files
        .map((file) => {
        return parseRoute(file);
    })
        .filter((r) => r.src !== '/api/main');
    const orderedRoutes = (0, lodash_1.orderBy)(routes, ['catchType', 'depth'], ['asc', 'desc']);
    return orderedRoutes.map((r) => ({
        src: r.src,
        dest: r.dest,
        path: r.path,
    }));
}
exports.generateRoutes = generateRoutes;

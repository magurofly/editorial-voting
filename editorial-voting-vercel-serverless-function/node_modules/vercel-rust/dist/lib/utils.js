"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gatherExtraFiles = exports.runUserScripts = exports.assertEnv = exports.getExecutableName = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const build_utils_1 = require("@vercel/build-utils");
function getExecutableName(binName) {
    // The compiled binary in Windows has the `.exe` extension
    return process.platform === 'win32' ? `${binName}.exe` : binName;
}
exports.getExecutableName = getExecutableName;
function assertEnv(name) {
    if (!process.env[name]) {
        throw new Error(`Missing ENV variable process.env.${name}`);
    }
    return process.env[name];
}
exports.assertEnv = assertEnv;
function runUserScripts(dir) {
    return __awaiter(this, void 0, void 0, function* () {
        const buildScriptPath = node_path_1.default.join(dir, 'build.sh');
        const buildScriptExists = node_fs_1.default.existsSync(buildScriptPath);
        if (buildScriptExists) {
            (0, build_utils_1.debug)('Running `build.sh`');
            yield (0, build_utils_1.runShellScript)(buildScriptPath);
        }
    });
}
exports.runUserScripts = runUserScripts;
function gatherExtraFiles(globMatcher, workPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!globMatcher)
            return {};
        (0, build_utils_1.debug)(`Gathering extra files for glob \`${JSON.stringify(globMatcher)}\` in ${workPath}`);
        if (Array.isArray(globMatcher)) {
            const allMatches = yield Promise.all(globMatcher.map((pattern) => (0, build_utils_1.glob)(pattern, workPath)));
            return allMatches.reduce((acc, matches) => (Object.assign(Object.assign({}, acc), matches)), {});
        }
        return (0, build_utils_1.glob)(globMatcher, workPath);
    });
}
exports.gatherExtraFiles = gatherExtraFiles;

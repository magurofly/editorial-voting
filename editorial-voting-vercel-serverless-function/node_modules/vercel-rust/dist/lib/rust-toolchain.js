"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installRustToolchain = void 0;
const build_utils_1 = require("@vercel/build-utils");
const execa_1 = __importDefault(require("execa"));
function downloadRustToolchain() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield (0, execa_1.default)(`curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y`, [], { shell: true, stdio: 'inherit' });
        }
        catch (err) {
            let message = 'Unknown Error';
            if (err instanceof Error) {
                message = err.message;
            }
            throw new Error(`Installing Rust Toolchain via rustup failed: ${message}`);
        }
    });
}
const installRustToolchain = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield (0, execa_1.default)(`rustup -V`, [], { shell: true, stdio: 'ignore' });
        (0, build_utils_1.debug)('Rust Toolchain is already installed, skipping download');
    }
    catch (err) {
        yield downloadRustToolchain();
    }
});
exports.installRustToolchain = installRustToolchain;
